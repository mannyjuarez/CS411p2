 
   

package lexicalanalyzer;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/*  Terminals

terminal     _boolean, _break, _class, _double, _else, _extends, _for, _if;
terminal     _implements, _int, _interface, _newarray, _println, _readln;
terminal     _return, _string, _void, _while, _plus, _minus, _less;
terminal     _multiplication, _division, _mod, _lessequal, _greater;
terminal     _greaterequal, _equal, _notequal, _and, _or, _not, _assignop;
terminal     _semicolon, _comma, _period, _leftparen, _rightparen,_leftbracket;
terminal     _rightbracket, _leftbrace, _rightbrace, _intconstant; 
terminal     _doubleconstant, _stringconstant, _booleanconstant, _id;
   
   
/*  Non Terminals

non terminal Program, Decl, VariableDecl, Variable, Type, FunctionDecl;
non terminal Formals, List, ClassDecl, Field, InterfaceDecl, Prototype;
non terminal StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, BreakStmt, IDS;
non terminal ReturnStmt, PrintStmt, Expr, Lvalue, Call, Actuals,Constant;
non terminal KleeneField, KleenePrototype, Extends, Implements;
non terminal PositiveExpr, KleeneVarDec, KleeneStmt;

/* -------------Precedence----------- */
   

precedence nonassoc _assignop;
precedence left     _or;
precedence left     _and;
precedence nonassoc _equal, _notequal;
precedence nonassoc _less, _lessequal, _greater, _greaterequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not;
precedence left _leftbracket, _period;

Start with Program;

Program         ::= Decl 
                    |
                    Decl Program
                    ;

Decl            ::= VariableDecl
                    |
                    FunctionDecl
                    |
                    ClassDecl
                    |
                    InterfaceDecl
                    ;

VariableDecl    ::= Variable _semicolon
                    ;

Variable        ::= Type _id
                    ;

Type            ::= _int
                    |
                    _double
                    |
                    _boolean
                    |
                    _string
                    |
                    Type _leftbracket _rightbracket
                    |
                    _id
                    ;

FunctionDecl    ::= Type _id _leftparen Formals _rightparen StmtBlock
                    |
                    _void _id _leftparen Formals _rightparen StmtBlock
                    ;

Formals         ::= Variable
                    |
                    Variable _comma List
                    |
                    ;
List            ::= Variable _comma List
                    |
                    Variable
                    ;

ClassDecl       ::= _class _id Extends Implements _leftbrace KleeneField _rightbrace
                    ;

Extends         ::= _extends _id
                    |
                    ;

Implements      ::= _implements IDS
                    |
                    ;

KleeneField     ::= Field KleeneField
                    |
                    ;

IDS             ::= _id
                    |
                    _id _comma IDS
                    ;

Field           ::= VariableDecl
                    |
                    FunctionDecl
                    ;

InterfaceDecl   ::= _interface _id _leftbrace KleenePrototype _rightbrace
                    ;

KleenePrototype ::= Prototype KleenePrototype
                    |
                    ;

Prototype       ::= Type _id _leftparen Formals _rightparen _semicolon
                    |
                    _void _id _leftparen Formals _rightparen _semicolon
                    ;

StmtBlock       ::= _leftbrace KleeneVarDec 
                    ;

KleeneVarDec     ::= VariableDecl KleeneVarDec
                    |
                    KleeneStmt
                    ;

KleeneStmt      ::= Stmt KleeneStmt
                    |
                    _rightbrace
                    ;

Stmt            ::= Expr _semicolon
                    |
                    _semicolon
                    |
                    IfStmt
                    |
                    WhileStmt
                    |
                    ForStmt
                    |
                    BreakStmt
                    |
                    ReturnStmt
                    |
                    PrintStmt
                    |
                    StmtBlock
                    ;

IfStmt          ::= _if _leftparen Expr _rightparen Stmt    %prec _if
                    |
                    _if _leftparen Expr _rightparen Stmt _else Stmt
                    ;

WhileStmt       ::= _while _leftparen Expr _rightparen Stmt
                    ;

ForStmt         ::= _for _leftparen Expr _semicolon Expr _semicolon Expr _rightparen Stmt
                    |
                    _for _leftparen _semicolon Expr _semicolon Expr _rightparen Stmt
                    |
                    _for _leftparen Expr _semicolon Expr _semicolon _rightparen Stmt
                    |
                    _for _leftparen _semicolon Expr _semicolon _rightparen Stmt
                    ;


BreakStmt       ::= _break _semicolon
                    ;

ReturnStmt      ::= _return Expr _semicolon
                    |
                    _return _semicolon
                    ;
PrintStmt       ::= _println _leftparen PositiveExpr _rightparen _semicolon
                    ;

PositiveExpr    ::= Expr _comma PositiveExpr
                    |
                    Expr
                    ;

Expr            ::= Lvalue _assignop Expr
                    |
                    Constant
                    |
                    Lvalue
                    |
                    Call
                    |
                    _leftparen Expr _rightparen
                    |
                    Expr _plus Expr
                    |
                    Expr _minus Expr
                    |
                    Expr _multiplication Expr
                    |
                    Expr _division Expr
                    |
                    Expr _mod Expr
                    |
                    _minus Expr
                    |
                    Expr _less Expr
                    |
                    Expr _lessequal Expr
                    |
                    Expr _greater Expr
                    |
                    Expr _greaterequal Expr
                    |
                    Expr _equal Expr
                    |
                    Expr _notequal Expr
                    |
                    Expr _and Expr
                    |
                    Expr _or Expr
                    |
                    _not Expr
                    |
                    _readln _leftparen _rightparen
                    |
                    _newarray _leftparen _intconstant _comma Type _rightparen
                    ;

Lvalue          ::= _id
                    |
                    Lvalue _leftbracket Expr _rightbracket
                    |
                    Lvalue _period _id
                    ;

Call            ::= _id _leftparen Actuals _rightparen
                    |
                    _id _period _id _leftparen Actuals _rightparen
                    ;

Actuals         ::= PositiveExpr
                    |
                    ;

Constant        ::= _intconstant
                    |
                    _doubleconstant
                    |
                    _stringconstant
                    |
                    _booleanconstant
                    ;                      
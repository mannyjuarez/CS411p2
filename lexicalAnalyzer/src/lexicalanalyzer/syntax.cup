 
   

package lexicalanalyzer;

/* Import the class java_cup.runtime.*  */
import java_cup.runtime.*;
import java.io.FileReader;
   
/*  Terminals

terminal     _boolean, _break, _class, _double, _else, _extends, _for, _if;
terminal     _implements, _int, _interface, _newarray, _println, _readln;
terminal     _return, _string, _void, _while, _plus, _minus, _less;
terminal     _multiplication, _division, _mod, _lessequal, _greater;
terminal     _greaterequal, _equal, _notequal, _and, _or, _not, _assignop;
terminal     _semicolon, _comma, _period, _leftparen, _rightparen,_leftbracket;
terminal     _rightbracket, _leftbrace, _rightbrace, _intconstant; 
terminal     _doubleconstant, _stringconstant, _booleanconstant, _id;
   
   
/*  Non Terminals

non terminal Program, Decl, VariableDecl, Variable, Type, FunctionDecl;
non terminal Formals, List, ClassDecl, Field, InterfaceDecl, Prototype;
non terminal StmtBlock, Stmt, IfStmt, WhileStmt, ForStmt, BreakStmt, IDS;
non terminal ReturnStmt, PrintStmt, Expr, Lvalue, Call, Actuals,Constant;
non terminal KleeneField, KleenePrototype, Extends, Implements;
non terminal PositiveExpr, KleeneVarDec, KleeneStmt;

/* -------------Precedence----------- */
   

precedence nonassoc _assignop;
precedence left     _or;
precedence left     _and;
precedence nonassoc _equal, _notequal;
precedence nonassoc _less, _lessequal, _greater, _greaterequal;
precedence left _plus, _minus;
precedence left _multiplication, _division, _mod;
precedence left _not;
precedence left _leftbracket, _period;

Start with Program;

Program         ::= Decl                //1
                    |
                    Decl Program        //2
                    ;

Decl            ::= VariableDecl        //3
                    |
                    FunctionDecl        //4
                    |
                    ClassDecl           //5 
                    |
                    InterfaceDecl       //6
                    ;

VariableDecl    ::= Variable _semicolon //7
                    ;

Variable        ::= Type _id            //8
                    ;

Type            ::= _int                //9
                    |
                    _double             //10
                    |
                    _boolean            //11
                    |
                    _string             //12
                    |
                    Type _leftbracket _rightbracket //13
                    |
                    _id                              //14
                    ;

FunctionDecl    ::= Type _id _leftparen Formals _rightparen StmtBlock   //15
                    |
                    _void _id _leftparen Formals _rightparen StmtBlock  //16
                    ;

Formals         ::= Variable                                            //17
                    |
                    Variable _comma List                                //18
                    |
                    ;                                                   //19
List            ::= Variable _comma List                                //20
                    |
                    Variable                                            //21
                    ;

ClassDecl       ::= _class _id Extends Implements _leftbrace KleeneField _rightbrace        //22
                    ;

Extends         ::= _extends _id                                        //23
                    |   
                    ;                                                   //24

Implements      ::= _implements IDS                                     //25
                    |
                    ;                                                   //26

KleeneField     ::= Field KleeneField                                   //27
                    |
                    ;                                                   //28

IDS             ::= _id                                                 //29
                    |
                    _id _comma IDS                                      //30
                    ;

Field           ::= VariableDecl                                        //31
                    |
                    FunctionDecl                                        //32
                    ;

InterfaceDecl   ::= _interface _id _leftbrace KleenePrototype _rightbrace   //33
                    ;

KleenePrototype ::= Prototype KleenePrototype                           //34
                    |
                    ;                                                   //35

Prototype       ::= Type _id _leftparen Formals _rightparen _semicolon  //36
                    |
                    _void _id _leftparen Formals _rightparen _semicolon //37
                    ;

StmtBlock       ::= _leftbrace KleeneVarDec                             //38
                    ;

KleeneVarDec     ::= VariableDecl KleeneVarDec                          //39
                    |
                    KleeneStmt                                          //40
                    ;

KleeneStmt      ::= Stmt KleeneStmt                                     //41
                    |
                    _rightbrace                                         //42
                    ;

Stmt            ::= Expr _semicolon                                     //43
                    |
                    _semicolon                                          //44
                    |
                    IfStmt                                              //45
                    |
                    WhileStmt                                           //46    
                    |
                    ForStmt                                             //47
                    |
                    BreakStmt                                           //48
                    |
                    ReturnStmt                                          //49    
                    |
                    PrintStmt                                           //50
                    |
                    StmtBlock                                           //51
                    ;

IfStmt          ::= _if _leftparen Expr _rightparen Stmt    %prec _if    //52
                    |
                    _if _leftparen Expr _rightparen Stmt _else Stmt     //53
                    ;

WhileStmt       ::= _while _leftparen Expr _rightparen Stmt              //54
                    ;   

ForStmt         ::= _for _leftparen Expr _semicolon Expr _semicolon Expr _rightparen Stmt   //55
                    |
                    _for _leftparen _semicolon Expr _semicolon Expr _rightparen Stmt        //56
                    |
                    _for _leftparen Expr _semicolon Expr _semicolon _rightparen Stmt        //57
                    |
                    _for _leftparen _semicolon Expr _semicolon _rightparen Stmt             //58
                    ;


BreakStmt       ::= _break _semicolon                                   //59
                    ;

ReturnStmt      ::= _return Expr _semicolon                             //60
                    |
                    _return _semicolon                                  //61
                    ;
PrintStmt       ::= _println _leftparen PositiveExpr _rightparen _semicolon //62
                    ;

PositiveExpr    ::= Expr _comma PositiveExpr                                //63
                    |
                    Expr                                                    //64
                    ;

Expr            ::= Lvalue _assignop Expr                                   //65
                    |
                    Constant                                                //66
                    |   
                    Lvalue                                                  //67
                    |
                    Call                                                    //68
                    |
                    _leftparen Expr _rightparen                             //69
                    |       
                    Expr _plus Expr                                         //70
                    |
                    Expr _minus Expr                                        //71
                    |       
                    Expr _multiplication Expr                               //72
                    |
                    Expr _division Expr                                     //73
                    |
                    Expr _mod Expr                                          //74
                    |   
                    _minus Expr                                             //75
                    |
                    Expr _less Expr                                         //76
                    |   
                    Expr _lessequal Expr                                    //77
                    |
                    Expr _greater Expr                                      //78
                    |
                    Expr _greaterequal Expr                                 //79
                    |
                    Expr _equal Expr                                        //80
                    |
                    Expr _notequal Expr                                     //81
                    |
                    Expr _and Expr                                          //82
                    |
                    Expr _or Expr                                           //83
                    |
                    _not Expr                                               //84
                    |
                    _readln _leftparen _rightparen                          //85
                    |
                    _newarray _leftparen _intconstant _comma Type _rightparen   //86
                    ;

Lvalue          ::= _id                                                     //87
                    |
                    Lvalue _leftbracket Expr _rightbracket                  //88
                    |
                    Lvalue _period _id                                      //89
                    ;

Call            ::= _id _leftparen Actuals _rightparen                      //90    
                    |
                    _id _period _id _leftparen Actuals _rightparen          //91
                    ;

Actuals         ::= PositiveExpr                                            //92
                    |
                    ;                                                       //93

Constant        ::= _intconstant                                            //94
                    |
                    _doubleconstant                                         //95
                    |
                    _stringconstant                                         //96
                    |   
                    _booleanconstant                                        //97
                    ;                      